// Package parameters provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package parameters

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ComplexObject defines model for ComplexObject.
type ComplexObject struct {
	Id      int    `json:"Id"`
	IsAdmin bool   `json:"IsAdmin"`
	Object  Object `json:"Object"`
}

// Object defines model for Object.
type Object struct {
	FirstName string `json:"firstName"`
	Role      string `json:"role"`
}

// GetCookieParams defines parameters for GetCookie.
type GetCookieParams struct {

	// primitive
	P *int32 `json:"p,omitempty"`

	// primitive
	Ep *int32 `json:"ep,omitempty"`

	// exploded array
	Ea *[]int32 `json:"ea,omitempty"`

	// array
	A *[]int32 `json:"a,omitempty"`

	// exploded object
	Eo *Object `json:"eo,omitempty"`

	// object
	O *Object `json:"o,omitempty"`

	// complex object
	Co *ComplexObject `json:"co,omitempty"`
}

// GetHeaderParams defines parameters for GetHeader.
type GetHeaderParams struct {

	// primitive
	XPrimitive *int32 `json:"X-Primitive,omitempty"`

	// primitive
	XPrimitiveExploded *int32 `json:"X-Primitive-Exploded,omitempty"`

	// exploded array
	XArrayExploded *[]int32 `json:"X-Array-Exploded,omitempty"`

	// array
	XArray *[]int32 `json:"X-Array,omitempty"`

	// exploded object
	XObjectExploded *Object `json:"X-Object-Exploded,omitempty"`

	// object
	XObject *Object `json:"X-Object,omitempty"`

	// complex object
	XComplexObject *ComplexObject `json:"X-Complex-Object,omitempty"`
}

// GetDeepObjectParams defines parameters for GetDeepObject.
type GetDeepObjectParams struct {

	// deep object
	DeepObj ComplexObject `json:"deepObj"`
}

// GetQueryFormParams defines parameters for GetQueryForm.
type GetQueryFormParams struct {

	// exploded array
	Ea *[]int32 `json:"ea,omitempty"`

	// array
	A *[]int32 `json:"a,omitempty"`

	// exploded object
	Eo *Object `json:"eo,omitempty"`

	// object
	O *Object `json:"o,omitempty"`

	// exploded primitive
	Ep *int32 `json:"ep,omitempty"`

	// primitive
	P *int32 `json:"p,omitempty"`

	// complex object
	Co *ComplexObject `json:"co,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetContentObject request
	GetContentObject(ctx context.Context, param ComplexObject) (*http.Response, error)

	// GetCookie request
	GetCookie(ctx context.Context, params *GetCookieParams) (*http.Response, error)

	// GetHeader request
	GetHeader(ctx context.Context, params *GetHeaderParams) (*http.Response, error)

	// GetLabelExplodeArray request
	GetLabelExplodeArray(ctx context.Context, param []int32) (*http.Response, error)

	// GetLabelExplodeObject request
	GetLabelExplodeObject(ctx context.Context, param Object) (*http.Response, error)

	// GetLabelNoExplodeArray request
	GetLabelNoExplodeArray(ctx context.Context, param []int32) (*http.Response, error)

	// GetLabelNoExplodeObject request
	GetLabelNoExplodeObject(ctx context.Context, param Object) (*http.Response, error)

	// GetMatrixExplodeArray request
	GetMatrixExplodeArray(ctx context.Context, id []int32) (*http.Response, error)

	// GetMatrixExplodeObject request
	GetMatrixExplodeObject(ctx context.Context, id Object) (*http.Response, error)

	// GetMatrixNoExplodeArray request
	GetMatrixNoExplodeArray(ctx context.Context, id []int32) (*http.Response, error)

	// GetMatrixNoExplodeObject request
	GetMatrixNoExplodeObject(ctx context.Context, id Object) (*http.Response, error)

	// GetPassThrough request
	GetPassThrough(ctx context.Context, param string) (*http.Response, error)

	// GetDeepObject request
	GetDeepObject(ctx context.Context, params *GetDeepObjectParams) (*http.Response, error)

	// GetQueryForm request
	GetQueryForm(ctx context.Context, params *GetQueryFormParams) (*http.Response, error)

	// GetSimpleExplodeArray request
	GetSimpleExplodeArray(ctx context.Context, param []int32) (*http.Response, error)

	// GetSimpleExplodeObject request
	GetSimpleExplodeObject(ctx context.Context, param Object) (*http.Response, error)

	// GetSimpleNoExplodeArray request
	GetSimpleNoExplodeArray(ctx context.Context, param []int32) (*http.Response, error)

	// GetSimpleNoExplodeObject request
	GetSimpleNoExplodeObject(ctx context.Context, param Object) (*http.Response, error)

	// GetSimplePrimitive request
	GetSimplePrimitive(ctx context.Context, param int32) (*http.Response, error)
}

func (c *Client) GetContentObject(ctx context.Context, param ComplexObject) (*http.Response, error) {
	req, err := NewGetContentObjectRequest(c.Server, param)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCookie(ctx context.Context, params *GetCookieParams) (*http.Response, error) {
	req, err := NewGetCookieRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetHeader(ctx context.Context, params *GetHeaderParams) (*http.Response, error) {
	req, err := NewGetHeaderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetLabelExplodeArray(ctx context.Context, param []int32) (*http.Response, error) {
	req, err := NewGetLabelExplodeArrayRequest(c.Server, param)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetLabelExplodeObject(ctx context.Context, param Object) (*http.Response, error) {
	req, err := NewGetLabelExplodeObjectRequest(c.Server, param)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetLabelNoExplodeArray(ctx context.Context, param []int32) (*http.Response, error) {
	req, err := NewGetLabelNoExplodeArrayRequest(c.Server, param)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetLabelNoExplodeObject(ctx context.Context, param Object) (*http.Response, error) {
	req, err := NewGetLabelNoExplodeObjectRequest(c.Server, param)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMatrixExplodeArray(ctx context.Context, id []int32) (*http.Response, error) {
	req, err := NewGetMatrixExplodeArrayRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMatrixExplodeObject(ctx context.Context, id Object) (*http.Response, error) {
	req, err := NewGetMatrixExplodeObjectRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMatrixNoExplodeArray(ctx context.Context, id []int32) (*http.Response, error) {
	req, err := NewGetMatrixNoExplodeArrayRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMatrixNoExplodeObject(ctx context.Context, id Object) (*http.Response, error) {
	req, err := NewGetMatrixNoExplodeObjectRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPassThrough(ctx context.Context, param string) (*http.Response, error) {
	req, err := NewGetPassThroughRequest(c.Server, param)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeepObject(ctx context.Context, params *GetDeepObjectParams) (*http.Response, error) {
	req, err := NewGetDeepObjectRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetQueryForm(ctx context.Context, params *GetQueryFormParams) (*http.Response, error) {
	req, err := NewGetQueryFormRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSimpleExplodeArray(ctx context.Context, param []int32) (*http.Response, error) {
	req, err := NewGetSimpleExplodeArrayRequest(c.Server, param)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSimpleExplodeObject(ctx context.Context, param Object) (*http.Response, error) {
	req, err := NewGetSimpleExplodeObjectRequest(c.Server, param)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSimpleNoExplodeArray(ctx context.Context, param []int32) (*http.Response, error) {
	req, err := NewGetSimpleNoExplodeArrayRequest(c.Server, param)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSimpleNoExplodeObject(ctx context.Context, param Object) (*http.Response, error) {
	req, err := NewGetSimpleNoExplodeObjectRequest(c.Server, param)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSimplePrimitive(ctx context.Context, param int32) (*http.Response, error) {
	req, err := NewGetSimplePrimitiveRequest(c.Server, param)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetContentObjectRequest generates requests for GetContentObject
func NewGetContentObjectRequest(server string, param ComplexObject) (*http.Request, error) {
	var err error

	var pathParam0 string

	var pathParamBuf0 []byte
	pathParamBuf0, err = json.Marshal(param)
	if err != nil {
		return nil, err
	}
	pathParam0 = string(pathParamBuf0)

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/contentObject/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCookieRequest generates requests for GetCookie
func NewGetCookieRequest(server string, params *GetCookieParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cookie")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.P != nil {
		var cookieParam0 string

		cookieParam0, err = runtime.StyleParam("simple", false, "p", *params.P)
		if err != nil {
			return nil, err
		}

		cookie0 := &http.Cookie{
			Name:  "p",
			Value: cookieParam0,
		}
		req.AddCookie(cookie0)
	}

	if params.Ep != nil {
		var cookieParam1 string

		cookieParam1, err = runtime.StyleParam("simple", true, "ep", *params.Ep)
		if err != nil {
			return nil, err
		}

		cookie1 := &http.Cookie{
			Name:  "ep",
			Value: cookieParam1,
		}
		req.AddCookie(cookie1)
	}

	if params.Ea != nil {
		var cookieParam2 string

		cookieParam2, err = runtime.StyleParam("simple", true, "ea", *params.Ea)
		if err != nil {
			return nil, err
		}

		cookie2 := &http.Cookie{
			Name:  "ea",
			Value: cookieParam2,
		}
		req.AddCookie(cookie2)
	}

	if params.A != nil {
		var cookieParam3 string

		cookieParam3, err = runtime.StyleParam("simple", false, "a", *params.A)
		if err != nil {
			return nil, err
		}

		cookie3 := &http.Cookie{
			Name:  "a",
			Value: cookieParam3,
		}
		req.AddCookie(cookie3)
	}

	if params.Eo != nil {
		var cookieParam4 string

		cookieParam4, err = runtime.StyleParam("simple", true, "eo", *params.Eo)
		if err != nil {
			return nil, err
		}

		cookie4 := &http.Cookie{
			Name:  "eo",
			Value: cookieParam4,
		}
		req.AddCookie(cookie4)
	}

	if params.O != nil {
		var cookieParam5 string

		cookieParam5, err = runtime.StyleParam("simple", false, "o", *params.O)
		if err != nil {
			return nil, err
		}

		cookie5 := &http.Cookie{
			Name:  "o",
			Value: cookieParam5,
		}
		req.AddCookie(cookie5)
	}

	if params.Co != nil {
		var cookieParam6 string

		var cookieParamBuf6 []byte
		cookieParamBuf6, err = json.Marshal(*params.Co)
		if err != nil {
			return nil, err
		}
		cookieParam6 = url.QueryEscape(string(cookieParamBuf6))

		cookie6 := &http.Cookie{
			Name:  "co",
			Value: cookieParam6,
		}
		req.AddCookie(cookie6)
	}

	return req, nil
}

// NewGetHeaderRequest generates requests for GetHeader
func NewGetHeaderRequest(server string, params *GetHeaderParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/header")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XPrimitive != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParam("simple", false, "X-Primitive", *params.XPrimitive)
		if err != nil {
			return nil, err
		}

		req.Header.Add("X-Primitive", headerParam0)
	}

	if params.XPrimitiveExploded != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParam("simple", true, "X-Primitive-Exploded", *params.XPrimitiveExploded)
		if err != nil {
			return nil, err
		}

		req.Header.Add("X-Primitive-Exploded", headerParam1)
	}

	if params.XArrayExploded != nil {
		var headerParam2 string

		headerParam2, err = runtime.StyleParam("simple", true, "X-Array-Exploded", *params.XArrayExploded)
		if err != nil {
			return nil, err
		}

		req.Header.Add("X-Array-Exploded", headerParam2)
	}

	if params.XArray != nil {
		var headerParam3 string

		headerParam3, err = runtime.StyleParam("simple", false, "X-Array", *params.XArray)
		if err != nil {
			return nil, err
		}

		req.Header.Add("X-Array", headerParam3)
	}

	if params.XObjectExploded != nil {
		var headerParam4 string

		headerParam4, err = runtime.StyleParam("simple", true, "X-Object-Exploded", *params.XObjectExploded)
		if err != nil {
			return nil, err
		}

		req.Header.Add("X-Object-Exploded", headerParam4)
	}

	if params.XObject != nil {
		var headerParam5 string

		headerParam5, err = runtime.StyleParam("simple", false, "X-Object", *params.XObject)
		if err != nil {
			return nil, err
		}

		req.Header.Add("X-Object", headerParam5)
	}

	if params.XComplexObject != nil {
		var headerParam6 string

		var headerParamBuf6 []byte
		headerParamBuf6, err = json.Marshal(*params.XComplexObject)
		if err != nil {
			return nil, err
		}
		headerParam6 = string(headerParamBuf6)

		req.Header.Add("X-Complex-Object", headerParam6)
	}

	return req, nil
}

// NewGetLabelExplodeArrayRequest generates requests for GetLabelExplodeArray
func NewGetLabelExplodeArrayRequest(server string, param []int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("label", true, "param", param)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/labelExplodeArray/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLabelExplodeObjectRequest generates requests for GetLabelExplodeObject
func NewGetLabelExplodeObjectRequest(server string, param Object) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("label", true, "param", param)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/labelExplodeObject/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLabelNoExplodeArrayRequest generates requests for GetLabelNoExplodeArray
func NewGetLabelNoExplodeArrayRequest(server string, param []int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("label", false, "param", param)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/labelNoExplodeArray/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLabelNoExplodeObjectRequest generates requests for GetLabelNoExplodeObject
func NewGetLabelNoExplodeObjectRequest(server string, param Object) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("label", false, "param", param)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/labelNoExplodeObject/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMatrixExplodeArrayRequest generates requests for GetMatrixExplodeArray
func NewGetMatrixExplodeArrayRequest(server string, id []int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("matrix", true, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/matrixExplodeArray/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMatrixExplodeObjectRequest generates requests for GetMatrixExplodeObject
func NewGetMatrixExplodeObjectRequest(server string, id Object) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("matrix", true, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/matrixExplodeObject/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMatrixNoExplodeArrayRequest generates requests for GetMatrixNoExplodeArray
func NewGetMatrixNoExplodeArrayRequest(server string, id []int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("matrix", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/matrixNoExplodeArray/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMatrixNoExplodeObjectRequest generates requests for GetMatrixNoExplodeObject
func NewGetMatrixNoExplodeObjectRequest(server string, id Object) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("matrix", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/matrixNoExplodeObject/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPassThroughRequest generates requests for GetPassThrough
func NewGetPassThroughRequest(server string, param string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0 = param

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/passThrough/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeepObjectRequest generates requests for GetDeepObject
func NewGetDeepObjectRequest(server string, params *GetDeepObjectParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/queryDeepObject")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("deepObject", true, "deepObj", params.DeepObj); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetQueryFormRequest generates requests for GetQueryForm
func NewGetQueryFormRequest(server string, params *GetQueryFormParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/queryForm")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Ea != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ea", *params.Ea); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.A != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "a", *params.A); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Eo != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "eo", *params.Eo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.O != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "o", *params.O); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ep != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ep", *params.Ep); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.P != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "p", *params.P); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Co != nil {

		if queryParamBuf, err := json.Marshal(*params.Co); err != nil {
			return nil, err
		} else {
			queryValues.Add("co", string(queryParamBuf))
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSimpleExplodeArrayRequest generates requests for GetSimpleExplodeArray
func NewGetSimpleExplodeArrayRequest(server string, param []int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", true, "param", param)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/simpleExplodeArray/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSimpleExplodeObjectRequest generates requests for GetSimpleExplodeObject
func NewGetSimpleExplodeObjectRequest(server string, param Object) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", true, "param", param)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/simpleExplodeObject/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSimpleNoExplodeArrayRequest generates requests for GetSimpleNoExplodeArray
func NewGetSimpleNoExplodeArrayRequest(server string, param []int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "param", param)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/simpleNoExplodeArray/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSimpleNoExplodeObjectRequest generates requests for GetSimpleNoExplodeObject
func NewGetSimpleNoExplodeObjectRequest(server string, param Object) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "param", param)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/simpleNoExplodeObject/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSimplePrimitiveRequest generates requests for GetSimplePrimitive
func NewGetSimplePrimitiveRequest(server string, param int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "param", param)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/simplePrimitive/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetContentObject request
	GetContentObjectWithResponse(ctx context.Context, param ComplexObject) (*GetContentObjectRzp, error)

	// GetCookie request
	GetCookieWithResponse(ctx context.Context, params *GetCookieParams) (*GetCookieRzp, error)

	// GetHeader request
	GetHeaderWithResponse(ctx context.Context, params *GetHeaderParams) (*GetHeaderRzp, error)

	// GetLabelExplodeArray request
	GetLabelExplodeArrayWithResponse(ctx context.Context, param []int32) (*GetLabelExplodeArrayRzp, error)

	// GetLabelExplodeObject request
	GetLabelExplodeObjectWithResponse(ctx context.Context, param Object) (*GetLabelExplodeObjectRzp, error)

	// GetLabelNoExplodeArray request
	GetLabelNoExplodeArrayWithResponse(ctx context.Context, param []int32) (*GetLabelNoExplodeArrayRzp, error)

	// GetLabelNoExplodeObject request
	GetLabelNoExplodeObjectWithResponse(ctx context.Context, param Object) (*GetLabelNoExplodeObjectRzp, error)

	// GetMatrixExplodeArray request
	GetMatrixExplodeArrayWithResponse(ctx context.Context, id []int32) (*GetMatrixExplodeArrayRzp, error)

	// GetMatrixExplodeObject request
	GetMatrixExplodeObjectWithResponse(ctx context.Context, id Object) (*GetMatrixExplodeObjectRzp, error)

	// GetMatrixNoExplodeArray request
	GetMatrixNoExplodeArrayWithResponse(ctx context.Context, id []int32) (*GetMatrixNoExplodeArrayRzp, error)

	// GetMatrixNoExplodeObject request
	GetMatrixNoExplodeObjectWithResponse(ctx context.Context, id Object) (*GetMatrixNoExplodeObjectRzp, error)

	// GetPassThrough request
	GetPassThroughWithResponse(ctx context.Context, param string) (*GetPassThroughRzp, error)

	// GetDeepObject request
	GetDeepObjectWithResponse(ctx context.Context, params *GetDeepObjectParams) (*GetDeepObjectRzp, error)

	// GetQueryForm request
	GetQueryFormWithResponse(ctx context.Context, params *GetQueryFormParams) (*GetQueryFormRzp, error)

	// GetSimpleExplodeArray request
	GetSimpleExplodeArrayWithResponse(ctx context.Context, param []int32) (*GetSimpleExplodeArrayRzp, error)

	// GetSimpleExplodeObject request
	GetSimpleExplodeObjectWithResponse(ctx context.Context, param Object) (*GetSimpleExplodeObjectRzp, error)

	// GetSimpleNoExplodeArray request
	GetSimpleNoExplodeArrayWithResponse(ctx context.Context, param []int32) (*GetSimpleNoExplodeArrayRzp, error)

	// GetSimpleNoExplodeObject request
	GetSimpleNoExplodeObjectWithResponse(ctx context.Context, param Object) (*GetSimpleNoExplodeObjectRzp, error)

	// GetSimplePrimitive request
	GetSimplePrimitiveWithResponse(ctx context.Context, param int32) (*GetSimplePrimitiveRzp, error)
}

type GetContentObjectRzp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetContentObjectRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContentObjectRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCookieRzp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCookieRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCookieRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHeaderRzp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHeaderRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHeaderRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLabelExplodeArrayRzp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLabelExplodeArrayRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLabelExplodeArrayRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLabelExplodeObjectRzp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLabelExplodeObjectRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLabelExplodeObjectRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLabelNoExplodeArrayRzp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLabelNoExplodeArrayRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLabelNoExplodeArrayRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLabelNoExplodeObjectRzp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLabelNoExplodeObjectRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLabelNoExplodeObjectRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMatrixExplodeArrayRzp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMatrixExplodeArrayRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMatrixExplodeArrayRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMatrixExplodeObjectRzp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMatrixExplodeObjectRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMatrixExplodeObjectRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMatrixNoExplodeArrayRzp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMatrixNoExplodeArrayRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMatrixNoExplodeArrayRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMatrixNoExplodeObjectRzp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMatrixNoExplodeObjectRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMatrixNoExplodeObjectRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPassThroughRzp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPassThroughRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPassThroughRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeepObjectRzp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDeepObjectRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeepObjectRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetQueryFormRzp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetQueryFormRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetQueryFormRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSimpleExplodeArrayRzp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSimpleExplodeArrayRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSimpleExplodeArrayRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSimpleExplodeObjectRzp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSimpleExplodeObjectRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSimpleExplodeObjectRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSimpleNoExplodeArrayRzp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSimpleNoExplodeArrayRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSimpleNoExplodeArrayRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSimpleNoExplodeObjectRzp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSimpleNoExplodeObjectRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSimpleNoExplodeObjectRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSimplePrimitiveRzp struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSimplePrimitiveRzp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSimplePrimitiveRzp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetContentObjectWithResponse request returning *GetContentObjectRzp
func (c *ClientWithResponses) GetContentObjectWithResponse(ctx context.Context, param ComplexObject) (*GetContentObjectRzp, error) {
	rsp, err := c.GetContentObject(ctx, param)
	if err != nil {
		return nil, err
	}
	return ParseGetContentObjectRzp(rsp)
}

// GetCookieWithResponse request returning *GetCookieRzp
func (c *ClientWithResponses) GetCookieWithResponse(ctx context.Context, params *GetCookieParams) (*GetCookieRzp, error) {
	rsp, err := c.GetCookie(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCookieRzp(rsp)
}

// GetHeaderWithResponse request returning *GetHeaderRzp
func (c *ClientWithResponses) GetHeaderWithResponse(ctx context.Context, params *GetHeaderParams) (*GetHeaderRzp, error) {
	rsp, err := c.GetHeader(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetHeaderRzp(rsp)
}

// GetLabelExplodeArrayWithResponse request returning *GetLabelExplodeArrayRzp
func (c *ClientWithResponses) GetLabelExplodeArrayWithResponse(ctx context.Context, param []int32) (*GetLabelExplodeArrayRzp, error) {
	rsp, err := c.GetLabelExplodeArray(ctx, param)
	if err != nil {
		return nil, err
	}
	return ParseGetLabelExplodeArrayRzp(rsp)
}

// GetLabelExplodeObjectWithResponse request returning *GetLabelExplodeObjectRzp
func (c *ClientWithResponses) GetLabelExplodeObjectWithResponse(ctx context.Context, param Object) (*GetLabelExplodeObjectRzp, error) {
	rsp, err := c.GetLabelExplodeObject(ctx, param)
	if err != nil {
		return nil, err
	}
	return ParseGetLabelExplodeObjectRzp(rsp)
}

// GetLabelNoExplodeArrayWithResponse request returning *GetLabelNoExplodeArrayRzp
func (c *ClientWithResponses) GetLabelNoExplodeArrayWithResponse(ctx context.Context, param []int32) (*GetLabelNoExplodeArrayRzp, error) {
	rsp, err := c.GetLabelNoExplodeArray(ctx, param)
	if err != nil {
		return nil, err
	}
	return ParseGetLabelNoExplodeArrayRzp(rsp)
}

// GetLabelNoExplodeObjectWithResponse request returning *GetLabelNoExplodeObjectRzp
func (c *ClientWithResponses) GetLabelNoExplodeObjectWithResponse(ctx context.Context, param Object) (*GetLabelNoExplodeObjectRzp, error) {
	rsp, err := c.GetLabelNoExplodeObject(ctx, param)
	if err != nil {
		return nil, err
	}
	return ParseGetLabelNoExplodeObjectRzp(rsp)
}

// GetMatrixExplodeArrayWithResponse request returning *GetMatrixExplodeArrayRzp
func (c *ClientWithResponses) GetMatrixExplodeArrayWithResponse(ctx context.Context, id []int32) (*GetMatrixExplodeArrayRzp, error) {
	rsp, err := c.GetMatrixExplodeArray(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetMatrixExplodeArrayRzp(rsp)
}

// GetMatrixExplodeObjectWithResponse request returning *GetMatrixExplodeObjectRzp
func (c *ClientWithResponses) GetMatrixExplodeObjectWithResponse(ctx context.Context, id Object) (*GetMatrixExplodeObjectRzp, error) {
	rsp, err := c.GetMatrixExplodeObject(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetMatrixExplodeObjectRzp(rsp)
}

// GetMatrixNoExplodeArrayWithResponse request returning *GetMatrixNoExplodeArrayRzp
func (c *ClientWithResponses) GetMatrixNoExplodeArrayWithResponse(ctx context.Context, id []int32) (*GetMatrixNoExplodeArrayRzp, error) {
	rsp, err := c.GetMatrixNoExplodeArray(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetMatrixNoExplodeArrayRzp(rsp)
}

// GetMatrixNoExplodeObjectWithResponse request returning *GetMatrixNoExplodeObjectRzp
func (c *ClientWithResponses) GetMatrixNoExplodeObjectWithResponse(ctx context.Context, id Object) (*GetMatrixNoExplodeObjectRzp, error) {
	rsp, err := c.GetMatrixNoExplodeObject(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetMatrixNoExplodeObjectRzp(rsp)
}

// GetPassThroughWithResponse request returning *GetPassThroughRzp
func (c *ClientWithResponses) GetPassThroughWithResponse(ctx context.Context, param string) (*GetPassThroughRzp, error) {
	rsp, err := c.GetPassThrough(ctx, param)
	if err != nil {
		return nil, err
	}
	return ParseGetPassThroughRzp(rsp)
}

// GetDeepObjectWithResponse request returning *GetDeepObjectRzp
func (c *ClientWithResponses) GetDeepObjectWithResponse(ctx context.Context, params *GetDeepObjectParams) (*GetDeepObjectRzp, error) {
	rsp, err := c.GetDeepObject(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDeepObjectRzp(rsp)
}

// GetQueryFormWithResponse request returning *GetQueryFormRzp
func (c *ClientWithResponses) GetQueryFormWithResponse(ctx context.Context, params *GetQueryFormParams) (*GetQueryFormRzp, error) {
	rsp, err := c.GetQueryForm(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetQueryFormRzp(rsp)
}

// GetSimpleExplodeArrayWithResponse request returning *GetSimpleExplodeArrayRzp
func (c *ClientWithResponses) GetSimpleExplodeArrayWithResponse(ctx context.Context, param []int32) (*GetSimpleExplodeArrayRzp, error) {
	rsp, err := c.GetSimpleExplodeArray(ctx, param)
	if err != nil {
		return nil, err
	}
	return ParseGetSimpleExplodeArrayRzp(rsp)
}

// GetSimpleExplodeObjectWithResponse request returning *GetSimpleExplodeObjectRzp
func (c *ClientWithResponses) GetSimpleExplodeObjectWithResponse(ctx context.Context, param Object) (*GetSimpleExplodeObjectRzp, error) {
	rsp, err := c.GetSimpleExplodeObject(ctx, param)
	if err != nil {
		return nil, err
	}
	return ParseGetSimpleExplodeObjectRzp(rsp)
}

// GetSimpleNoExplodeArrayWithResponse request returning *GetSimpleNoExplodeArrayRzp
func (c *ClientWithResponses) GetSimpleNoExplodeArrayWithResponse(ctx context.Context, param []int32) (*GetSimpleNoExplodeArrayRzp, error) {
	rsp, err := c.GetSimpleNoExplodeArray(ctx, param)
	if err != nil {
		return nil, err
	}
	return ParseGetSimpleNoExplodeArrayRzp(rsp)
}

// GetSimpleNoExplodeObjectWithResponse request returning *GetSimpleNoExplodeObjectRzp
func (c *ClientWithResponses) GetSimpleNoExplodeObjectWithResponse(ctx context.Context, param Object) (*GetSimpleNoExplodeObjectRzp, error) {
	rsp, err := c.GetSimpleNoExplodeObject(ctx, param)
	if err != nil {
		return nil, err
	}
	return ParseGetSimpleNoExplodeObjectRzp(rsp)
}

// GetSimplePrimitiveWithResponse request returning *GetSimplePrimitiveRzp
func (c *ClientWithResponses) GetSimplePrimitiveWithResponse(ctx context.Context, param int32) (*GetSimplePrimitiveRzp, error) {
	rsp, err := c.GetSimplePrimitive(ctx, param)
	if err != nil {
		return nil, err
	}
	return ParseGetSimplePrimitiveRzp(rsp)
}

// ParseGetContentObjectRzp parses an HTTP response from a GetContentObjectWithResponse call
func ParseGetContentObjectRzp(rsp *http.Response) (*GetContentObjectRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetContentObjectRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCookieRzp parses an HTTP response from a GetCookieWithResponse call
func ParseGetCookieRzp(rsp *http.Response) (*GetCookieRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCookieRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetHeaderRzp parses an HTTP response from a GetHeaderWithResponse call
func ParseGetHeaderRzp(rsp *http.Response) (*GetHeaderRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetHeaderRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetLabelExplodeArrayRzp parses an HTTP response from a GetLabelExplodeArrayWithResponse call
func ParseGetLabelExplodeArrayRzp(rsp *http.Response) (*GetLabelExplodeArrayRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLabelExplodeArrayRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetLabelExplodeObjectRzp parses an HTTP response from a GetLabelExplodeObjectWithResponse call
func ParseGetLabelExplodeObjectRzp(rsp *http.Response) (*GetLabelExplodeObjectRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLabelExplodeObjectRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetLabelNoExplodeArrayRzp parses an HTTP response from a GetLabelNoExplodeArrayWithResponse call
func ParseGetLabelNoExplodeArrayRzp(rsp *http.Response) (*GetLabelNoExplodeArrayRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLabelNoExplodeArrayRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetLabelNoExplodeObjectRzp parses an HTTP response from a GetLabelNoExplodeObjectWithResponse call
func ParseGetLabelNoExplodeObjectRzp(rsp *http.Response) (*GetLabelNoExplodeObjectRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLabelNoExplodeObjectRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMatrixExplodeArrayRzp parses an HTTP response from a GetMatrixExplodeArrayWithResponse call
func ParseGetMatrixExplodeArrayRzp(rsp *http.Response) (*GetMatrixExplodeArrayRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMatrixExplodeArrayRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMatrixExplodeObjectRzp parses an HTTP response from a GetMatrixExplodeObjectWithResponse call
func ParseGetMatrixExplodeObjectRzp(rsp *http.Response) (*GetMatrixExplodeObjectRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMatrixExplodeObjectRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMatrixNoExplodeArrayRzp parses an HTTP response from a GetMatrixNoExplodeArrayWithResponse call
func ParseGetMatrixNoExplodeArrayRzp(rsp *http.Response) (*GetMatrixNoExplodeArrayRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMatrixNoExplodeArrayRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMatrixNoExplodeObjectRzp parses an HTTP response from a GetMatrixNoExplodeObjectWithResponse call
func ParseGetMatrixNoExplodeObjectRzp(rsp *http.Response) (*GetMatrixNoExplodeObjectRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMatrixNoExplodeObjectRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPassThroughRzp parses an HTTP response from a GetPassThroughWithResponse call
func ParseGetPassThroughRzp(rsp *http.Response) (*GetPassThroughRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPassThroughRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetDeepObjectRzp parses an HTTP response from a GetDeepObjectWithResponse call
func ParseGetDeepObjectRzp(rsp *http.Response) (*GetDeepObjectRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDeepObjectRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetQueryFormRzp parses an HTTP response from a GetQueryFormWithResponse call
func ParseGetQueryFormRzp(rsp *http.Response) (*GetQueryFormRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetQueryFormRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSimpleExplodeArrayRzp parses an HTTP response from a GetSimpleExplodeArrayWithResponse call
func ParseGetSimpleExplodeArrayRzp(rsp *http.Response) (*GetSimpleExplodeArrayRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSimpleExplodeArrayRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSimpleExplodeObjectRzp parses an HTTP response from a GetSimpleExplodeObjectWithResponse call
func ParseGetSimpleExplodeObjectRzp(rsp *http.Response) (*GetSimpleExplodeObjectRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSimpleExplodeObjectRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSimpleNoExplodeArrayRzp parses an HTTP response from a GetSimpleNoExplodeArrayWithResponse call
func ParseGetSimpleNoExplodeArrayRzp(rsp *http.Response) (*GetSimpleNoExplodeArrayRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSimpleNoExplodeArrayRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSimpleNoExplodeObjectRzp parses an HTTP response from a GetSimpleNoExplodeObjectWithResponse call
func ParseGetSimpleNoExplodeObjectRzp(rsp *http.Response) (*GetSimpleNoExplodeObjectRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSimpleNoExplodeObjectRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSimplePrimitiveRzp parses an HTTP response from a GetSimplePrimitiveWithResponse call
func ParseGetSimplePrimitiveRzp(rsp *http.Response) (*GetSimplePrimitiveRzp, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSimplePrimitiveRzp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /contentObject/{param})
	GetContentObject(ctx echo.Context, param ComplexObject) error

	// (GET /cookie)
	GetCookie(ctx echo.Context, params GetCookieParams) error

	// (GET /header)
	GetHeader(ctx echo.Context, params GetHeaderParams) error

	// (GET /labelExplodeArray/{.param*})
	GetLabelExplodeArray(ctx echo.Context, param []int32) error

	// (GET /labelExplodeObject/{.param*})
	GetLabelExplodeObject(ctx echo.Context, param Object) error

	// (GET /labelNoExplodeArray/{.param})
	GetLabelNoExplodeArray(ctx echo.Context, param []int32) error

	// (GET /labelNoExplodeObject/{.param})
	GetLabelNoExplodeObject(ctx echo.Context, param Object) error

	// (GET /matrixExplodeArray/{.id*})
	GetMatrixExplodeArray(ctx echo.Context, id []int32) error

	// (GET /matrixExplodeObject/{.id*})
	GetMatrixExplodeObject(ctx echo.Context, id Object) error

	// (GET /matrixNoExplodeArray/{.id})
	GetMatrixNoExplodeArray(ctx echo.Context, id []int32) error

	// (GET /matrixNoExplodeObject/{.id})
	GetMatrixNoExplodeObject(ctx echo.Context, id Object) error

	// (GET /passThrough/{param})
	GetPassThrough(ctx echo.Context, param string) error

	// (GET /queryDeepObject)
	GetDeepObject(ctx echo.Context, params GetDeepObjectParams) error

	// (GET /queryForm)
	GetQueryForm(ctx echo.Context, params GetQueryFormParams) error

	// (GET /simpleExplodeArray/{param*})
	GetSimpleExplodeArray(ctx echo.Context, param []int32) error

	// (GET /simpleExplodeObject/{param*})
	GetSimpleExplodeObject(ctx echo.Context, param Object) error

	// (GET /simpleNoExplodeArray/{param})
	GetSimpleNoExplodeArray(ctx echo.Context, param []int32) error

	// (GET /simpleNoExplodeObject/{param})
	GetSimpleNoExplodeObject(ctx echo.Context, param Object) error

	// (GET /simplePrimitive/{param})
	GetSimplePrimitive(ctx echo.Context, param int32) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetContentObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetContentObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var param ComplexObject

	err = json.Unmarshal([]byte(ctx.Param("param")), &param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshaling parameter 'param' as JSON")
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetContentObject(ctx, param)
	return err
}

// GetCookie converts echo context to params.
func (w *ServerInterfaceWrapper) GetCookie(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCookieParams

	if cookie, err := ctx.Cookie("p"); err == nil {

		var value int32
		err = runtime.BindStyledParameter("simple", false, "p", cookie.Value, &value)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter p: %s", err))
		}
		params.P = &value

	}

	if cookie, err := ctx.Cookie("ep"); err == nil {

		var value int32
		err = runtime.BindStyledParameter("simple", true, "ep", cookie.Value, &value)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ep: %s", err))
		}
		params.Ep = &value

	}

	if cookie, err := ctx.Cookie("ea"); err == nil {

		var value []int32
		err = runtime.BindStyledParameter("simple", true, "ea", cookie.Value, &value)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ea: %s", err))
		}
		params.Ea = &value

	}

	if cookie, err := ctx.Cookie("a"); err == nil {

		var value []int32
		err = runtime.BindStyledParameter("simple", false, "a", cookie.Value, &value)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter a: %s", err))
		}
		params.A = &value

	}

	if cookie, err := ctx.Cookie("eo"); err == nil {

		var value Object
		err = runtime.BindStyledParameter("simple", true, "eo", cookie.Value, &value)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eo: %s", err))
		}
		params.Eo = &value

	}

	if cookie, err := ctx.Cookie("o"); err == nil {

		var value Object
		err = runtime.BindStyledParameter("simple", false, "o", cookie.Value, &value)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter o: %s", err))
		}
		params.O = &value

	}

	if cookie, err := ctx.Cookie("co"); err == nil {

		var value ComplexObject
		var decoded string
		decoded, err := url.QueryUnescape(cookie.Value)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, "Error unescaping cookie parameter 'co'")
		}
		err = json.Unmarshal([]byte(decoded), &value)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshaling parameter 'co' as JSON")
		}
		params.Co = &value

	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCookie(ctx, params)
	return err
}

// GetHeader converts echo context to params.
func (w *ServerInterfaceWrapper) GetHeader(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHeaderParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Primitive" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Primitive")]; found {
		var XPrimitive int32
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Primitive, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "X-Primitive", valueList[0], &XPrimitive)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Primitive: %s", err))
		}

		params.XPrimitive = &XPrimitive
	}
	// ------------- Optional header parameter "X-Primitive-Exploded" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Primitive-Exploded")]; found {
		var XPrimitiveExploded int32
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Primitive-Exploded, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", true, "X-Primitive-Exploded", valueList[0], &XPrimitiveExploded)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Primitive-Exploded: %s", err))
		}

		params.XPrimitiveExploded = &XPrimitiveExploded
	}
	// ------------- Optional header parameter "X-Array-Exploded" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Array-Exploded")]; found {
		var XArrayExploded []int32
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Array-Exploded, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", true, "X-Array-Exploded", valueList[0], &XArrayExploded)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Array-Exploded: %s", err))
		}

		params.XArrayExploded = &XArrayExploded
	}
	// ------------- Optional header parameter "X-Array" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Array")]; found {
		var XArray []int32
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Array, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "X-Array", valueList[0], &XArray)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Array: %s", err))
		}

		params.XArray = &XArray
	}
	// ------------- Optional header parameter "X-Object-Exploded" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Object-Exploded")]; found {
		var XObjectExploded Object
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Object-Exploded, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", true, "X-Object-Exploded", valueList[0], &XObjectExploded)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Object-Exploded: %s", err))
		}

		params.XObjectExploded = &XObjectExploded
	}
	// ------------- Optional header parameter "X-Object" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Object")]; found {
		var XObject Object
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Object, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "X-Object", valueList[0], &XObject)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Object: %s", err))
		}

		params.XObject = &XObject
	}
	// ------------- Optional header parameter "X-Complex-Object" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Complex-Object")]; found {
		var XComplexObject ComplexObject
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Complex-Object, got %d", n))
		}

		err = json.Unmarshal([]byte(valueList[0]), &XComplexObject)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshaling parameter 'X-Complex-Object' as JSON")
		}

		params.XComplexObject = &XComplexObject
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHeader(ctx, params)
	return err
}

// GetLabelExplodeArray converts echo context to params.
func (w *ServerInterfaceWrapper) GetLabelExplodeArray(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var param []int32

	err = runtime.BindStyledParameter("label", true, "param", ctx.Param("param"), &param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLabelExplodeArray(ctx, param)
	return err
}

// GetLabelExplodeObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetLabelExplodeObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var param Object

	err = runtime.BindStyledParameter("label", true, "param", ctx.Param("param"), &param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLabelExplodeObject(ctx, param)
	return err
}

// GetLabelNoExplodeArray converts echo context to params.
func (w *ServerInterfaceWrapper) GetLabelNoExplodeArray(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var param []int32

	err = runtime.BindStyledParameter("label", false, "param", ctx.Param("param"), &param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLabelNoExplodeArray(ctx, param)
	return err
}

// GetLabelNoExplodeObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetLabelNoExplodeObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var param Object

	err = runtime.BindStyledParameter("label", false, "param", ctx.Param("param"), &param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLabelNoExplodeObject(ctx, param)
	return err
}

// GetMatrixExplodeArray converts echo context to params.
func (w *ServerInterfaceWrapper) GetMatrixExplodeArray(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []int32

	err = runtime.BindStyledParameter("matrix", true, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMatrixExplodeArray(ctx, id)
	return err
}

// GetMatrixExplodeObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetMatrixExplodeObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Object

	err = runtime.BindStyledParameter("matrix", true, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMatrixExplodeObject(ctx, id)
	return err
}

// GetMatrixNoExplodeArray converts echo context to params.
func (w *ServerInterfaceWrapper) GetMatrixNoExplodeArray(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id []int32

	err = runtime.BindStyledParameter("matrix", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMatrixNoExplodeArray(ctx, id)
	return err
}

// GetMatrixNoExplodeObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetMatrixNoExplodeObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Object

	err = runtime.BindStyledParameter("matrix", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMatrixNoExplodeObject(ctx, id)
	return err
}

// GetPassThrough converts echo context to params.
func (w *ServerInterfaceWrapper) GetPassThrough(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var param string

	param = ctx.Param("param")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPassThrough(ctx, param)
	return err
}

// GetDeepObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeepObject(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeepObjectParams
	// ------------- Required query parameter "deepObj" -------------

	err = runtime.BindQueryParameter("deepObject", true, true, "deepObj", ctx.QueryParams(), &params.DeepObj)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deepObj: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDeepObject(ctx, params)
	return err
}

// GetQueryForm converts echo context to params.
func (w *ServerInterfaceWrapper) GetQueryForm(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetQueryFormParams
	// ------------- Optional query parameter "ea" -------------

	err = runtime.BindQueryParameter("form", true, false, "ea", ctx.QueryParams(), &params.Ea)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ea: %s", err))
	}

	// ------------- Optional query parameter "a" -------------

	err = runtime.BindQueryParameter("form", false, false, "a", ctx.QueryParams(), &params.A)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter a: %s", err))
	}

	// ------------- Optional query parameter "eo" -------------

	err = runtime.BindQueryParameter("form", true, false, "eo", ctx.QueryParams(), &params.Eo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eo: %s", err))
	}

	// ------------- Optional query parameter "o" -------------

	err = runtime.BindQueryParameter("form", false, false, "o", ctx.QueryParams(), &params.O)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter o: %s", err))
	}

	// ------------- Optional query parameter "ep" -------------

	err = runtime.BindQueryParameter("form", true, false, "ep", ctx.QueryParams(), &params.Ep)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ep: %s", err))
	}

	// ------------- Optional query parameter "p" -------------

	err = runtime.BindQueryParameter("form", false, false, "p", ctx.QueryParams(), &params.P)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter p: %s", err))
	}

	// ------------- Optional query parameter "co" -------------

	if paramValue := ctx.QueryParam("co"); paramValue != "" {

		var value ComplexObject
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshaling parameter 'co' as JSON")
		}
		params.Co = &value

	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetQueryForm(ctx, params)
	return err
}

// GetSimpleExplodeArray converts echo context to params.
func (w *ServerInterfaceWrapper) GetSimpleExplodeArray(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var param []int32

	err = runtime.BindStyledParameter("simple", true, "param", ctx.Param("param"), &param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSimpleExplodeArray(ctx, param)
	return err
}

// GetSimpleExplodeObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetSimpleExplodeObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var param Object

	err = runtime.BindStyledParameter("simple", true, "param", ctx.Param("param"), &param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSimpleExplodeObject(ctx, param)
	return err
}

// GetSimpleNoExplodeArray converts echo context to params.
func (w *ServerInterfaceWrapper) GetSimpleNoExplodeArray(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var param []int32

	err = runtime.BindStyledParameter("simple", false, "param", ctx.Param("param"), &param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSimpleNoExplodeArray(ctx, param)
	return err
}

// GetSimpleNoExplodeObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetSimpleNoExplodeObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var param Object

	err = runtime.BindStyledParameter("simple", false, "param", ctx.Param("param"), &param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSimpleNoExplodeObject(ctx, param)
	return err
}

// GetSimplePrimitive converts echo context to params.
func (w *ServerInterfaceWrapper) GetSimplePrimitive(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "param" -------------
	var param int32

	err = runtime.BindStyledParameter("simple", false, "param", ctx.Param("param"), &param)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter param: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSimplePrimitive(ctx, param)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/contentObject/:param", wrapper.GetContentObject)
	router.GET(baseURL+"/cookie", wrapper.GetCookie)
	router.GET(baseURL+"/header", wrapper.GetHeader)
	router.GET(baseURL+"/labelExplodeArray/:param", wrapper.GetLabelExplodeArray)
	router.GET(baseURL+"/labelExplodeObject/:param", wrapper.GetLabelExplodeObject)
	router.GET(baseURL+"/labelNoExplodeArray/:param", wrapper.GetLabelNoExplodeArray)
	router.GET(baseURL+"/labelNoExplodeObject/:param", wrapper.GetLabelNoExplodeObject)
	router.GET(baseURL+"/matrixExplodeArray/:id", wrapper.GetMatrixExplodeArray)
	router.GET(baseURL+"/matrixExplodeObject/:id", wrapper.GetMatrixExplodeObject)
	router.GET(baseURL+"/matrixNoExplodeArray/:id", wrapper.GetMatrixNoExplodeArray)
	router.GET(baseURL+"/matrixNoExplodeObject/:id", wrapper.GetMatrixNoExplodeObject)
	router.GET(baseURL+"/passThrough/:param", wrapper.GetPassThrough)
	router.GET(baseURL+"/queryDeepObject", wrapper.GetDeepObject)
	router.GET(baseURL+"/queryForm", wrapper.GetQueryForm)
	router.GET(baseURL+"/simpleExplodeArray/:param", wrapper.GetSimpleExplodeArray)
	router.GET(baseURL+"/simpleExplodeObject/:param", wrapper.GetSimpleExplodeObject)
	router.GET(baseURL+"/simpleNoExplodeArray/:param", wrapper.GetSimpleNoExplodeArray)
	router.GET(baseURL+"/simpleNoExplodeObject/:param", wrapper.GetSimpleNoExplodeObject)
	router.GET(baseURL+"/simplePrimitive/:param", wrapper.GetSimplePrimitive)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xZS2/jNhD+K8a0p0JreXdvugXbV4Duo3UOBRY5MNI45lYSuSQdJDD03wuSelIPS7aV",
	"OHuzpeF8832cGQypPYQs4SzFVEkI9iBQcpZKNH/WNOEx/pM/0k9ClipMlf6p8FH5PCY01f9kuMWEmOdP",
	"HCEAqQRN7yHLMg8ilKGgXFGWQgBXC2n8LgqsBbv7hqECbWr9GPQPTFs9frYvgz1wwTgKRW1w11ENjaYK",
	"71FA5sG1vIoSG1T+8o6xGEmqX1bOfha4gQB+8iv+fg7uf67iEfh9RwVGEHwtFnsausK5bbhtxrihQqpP",
	"JMEOYTwQLO564aAaK6/m6tZoStMN04tjGmK+OakBgo/XN9q7okq7hxuUarFG8YACPHhAIe02vF2ulitt",
	"yDimhFMI4P1ytXwLHnCitiZ+P99vy8/fcyJIkuk392joarJE76veDfgD1Yf6AuNKkAQVCgnB10b+EM5j",
	"GprF/jfJnCwa2p5mYuRqQGDCBq+QwSBDXUsldpjdes0cf7da9eGVdr5TCJnB9EPG/qM4rIaxaMnQLAgu",
	"aEIVfdCG+MhjFiEEGxJLzImFhZuCGng1qTZMJETZInj/DrxWTWTeKEQtTw8gnoyYo0QLIgR5GgtLGrBU",
	"YSJH4ZdPLFpHPK0whvSeL4xSFlYUzChdWCOgca3MhW4jDklwHOJc5d5kElqDSsNOBiEDp/jTXRybQt4i",
	"iVAMFfKf1uLUQt4WbvKY/n3zpbZk1pIegH7zW56Fz1Lk7UCutHV3EM9W8j1RvXDht6OyVdAt1hx9oC+C",
	"V9cO2kRyRwWhvuYQkzuMc71NTvj7pekCvwwOQn+5y9rNo2vHx8ww58lJD6R6MhOiYQjnnIzqmhWz41TR",
	"+kbIc6g2JmFn1+cT68qqw/o01w0IVK/jHyivSv7NzJog3MHUOkW5l86thChBH53UotFw4X1sLTqm8Gg0",
	"e05ZdvMJVubUJMWO71UHJJuWTLOJ02pVNBohzhka1WvOqHafmqbaCV3q0rOKEylvtoLt7rdjLpW+VOaD",
	"V0oTriRf5MLo+w7F06+IvLov7KNcszpw6IwQ+fApwsBWPCPr+ugMcQbwKlGiKua+YdqE8jsTyRD3v0uj",
	"A9RHnTcd9me7U6p466Uw8bzpRPVsQY07d7qazX/f5CCeA7CkeuhqxGU7z/XqANsjAF/yKO1E375YO6lJ",
	"2o9DzXljxNFx3Vp2uQduS3E+1RqfaybIdjlH7tkUcifZw8PHumPdBR+651du/MfAddfCizh2z6ZSeak+",
	"Xp/6JwBHmaOUGJE8c8mgXZsvzTb8nYghgK1SPPD9/DOzQqmWelJMCF8SCtlt9n8AAAD//xeCHE2EIAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
